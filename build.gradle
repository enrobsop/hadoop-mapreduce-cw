apply plugin: 'distribution'

defaultTasks "clean", "resources", "testAllJobs", "codeDistTar"

def testResultsDirPath  = "./build/results"
def testResultsDir      = new File(testResultsDirPath)

distributions {
	code {
		baseName = 'code'
		contents {
			from { './code' }
		}
	}
}

// -------------------- Helpers --------------------

def toSnakeCase = { text ->
	text.replaceAll( /([A-Z])/, /_$1/ ).toLowerCase().replaceAll( /^_/, '' )
}

def getLines = { filePath ->
	def lines = []
	new File(filePath).eachLine { line ->
		lines << line.replaceAll(/[\t ]+/, "|")
	}
	lines
}

def assertContentsMatch = { expected, actual ->

	logger.quiet "Comparing actual and expected results: "
	logger.quiet "  Actual:   $actual"
	logger.quiet "  Expected: $expected"

	def actualLines   = getLines(actual)
	def expectedLines = getLines(expected)

	assert actualLines.size() == expectedLines.size(),
		"Files are of different sizes! Expected ${expectedLines.size()} but found ${actualLines.size()}"

	actualLines.eachWithIndex { actualLine, i ->
		def expectedLine = expectedLines[i]
		assert actualLine == expectedLine, "Unexpected result on line $i"
	}

	logger.quiet "SUCCESS: Contents match!"

}

// -------------------- Tasks --------------------

task resources << {
	testResultsDir.mkdirs()
}

tasks.addRule("Pattern: test<JobName>Job. E.g. testStudentTimesJob, testStudyGroupsJob, testPopularTagsJob, testAverageLengthJob", ) { String taskName ->
	if (taskName.matches(/test(\w+)Job/)) {
		task(taskName, type: Exec) {
			dependsOn   = ['resources']

			def matcher     = taskName =~ /test(\w+)Job/
			def jobName     = toSnakeCase(matcher[0][1])

			def mapper      = "./code/${jobName}_mapper.py"
			def reducer     = "./code/${jobName}_reducer.py"
			def data        = "./test/student_test_posts.csv"
			def results     = "${testResultsDirPath}/${jobName}_result.txt"

			commandLine "bash", "-c", "cat $data | python $mapper | sort | python $reducer > $results"

			doLast  {
				def expected = "./test/expected_${jobName}_result.txt"
				assertContentsMatch expected, results
			}
		}
	}
}

task testAllJobs() {
	group "testPosts"
	description "Tests each of the map reduce jobs using ./test/student_test_posts.csv"
	dependsOn clean,
		testStudentTimesJob
//		testStudyGroupsJob
//      testPopularTagsJob,
//		testAverageLengthJob
}
